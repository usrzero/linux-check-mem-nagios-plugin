#!/bin/bash

# check_mem v1.5
#
# v1.1 Copyright (C) 2012 Lukasz Gogolin (lukasz.gogolin@gmail.com)
# v1.2 2014 Modified by Aaron Roydhouse (aaron@roydhouse.com)
# v1.3 2015 Modified by Aaron Roydhouse (aaron@roydhouse.com)
# v1.4 2018 Modified by @DavidGoodwin, @eacmen, @whereisaaron
# v1.5 2020 Modified by @usrzero

# Default percentage usage limits
CRITICAL=90
WARNING=80
login='nagios';

usage() {
    echo "check_mem v1.5"
    echo ""
    echo "Usage: check_mem_by_ssh -H <host> -p <port> -l <ssh_user> -w <warnlevel> -c <critlevel>"
    echo ""
    echo "  'warnlevel' and 'critlevel' are percentage values without a percent sign ('%')"
    echo "  e.g. check_mem_by_ssh -H 192.168.21.21 -p 22 -l nagios -w 80 -c 90"
    echo ""
 }

while test -n "$1"; do
    case "$1" in
        -H)
            host=$2
            shift
            ;;
        -p)
            port=$2
            shift
            ;;
        -l)
            login=$2
            shift
            ;;
        --help|-h)
            print_help
            exit 0
            ;;
        -w)
            WARNING=$2
            shift
            ;;
        -c)
            CRITICAL=$2
            shift
            ;;
        *)
            echo "Unknown Argument: $1"
            print_help
            exit 3
            ;;
    esac
    shift
done



if [ $CRITICAL -lt 0 -o $CRITICAL -gt 100 -o $WARNING -lt 0 -o $WARNING -gt 100 -o $WARNING -gt $CRITICAL ]; then
    usage
    exit 1
fi

if [[ -z "$host" || -z "$port" ]]; then
    echo "No Host or Port Specified"
    usage;
    exit 3;
fi

ssh_data=$(ssh -o ConnectTimeout=5 -p$port $login@$host 'cat /proc/meminfo' 2>&1);
ssh_ret=$?;

if [ $ssh_ret != 0 ]; then
    echo "ERROR: $ssh_data";
    exit 2;
fi




memTotal_k=$(echo "$ssh_data" | awk '$1~/^MemTotal/{print $2}')
memFree_k=$(echo "$ssh_data" | awk '$1~/^MemFree/{print $2}')
memBuffer_k=$(echo "$ssh_data" | awk '$1~/^Buffers/{print $2}')
memCache_k=$(echo "$ssh_data" | awk '$1~/^Cached/{print $2}')

memUsed_k=$(( $memTotal_k - $memFree_k - $memBuffer_k - $memCache_k ))
memUsedPrc=$(( ($memUsed_k * 100) / $memTotal_k ))

warn_b=$(( ((($memTotal_k*100)-($memTotal_k*(100-${WARNING})))/100)*1024 ))
crit_b=$(( ((($memTotal_k*100)-($memTotal_k*(100-${CRITICAL})))/100)*1024 ))

memTotal_b=$(($memTotal_k*1024))
memFree_b=$(($memFree_k*1024))
memUsed_b=$(($memUsed_k*1024))
memBuffer_b=$(($memBuffer_k*1024))
memCache_b=$(($memCache_k*1024))

memTotal_m=$(($memTotal_k/1024))
memUsed_m=$(($memUsed_k/1024))

minmax="0;$memTotal_b";
data="TOTAL=$memTotal_b;;;$minmax USED=$memUsed_b;$warn_b;$crit_b;$minmax CACHE=$memCache_b;;;$minmax BUFFER=$memBuffer_b;;;$minmax"

if [ "$memUsedPrc" -ge "${CRITICAL}" ]; then
    echo "MEMORY CRITICAL - Total: $memTotal_m MB - Used: $memUsed_m MB - $memUsedPrc% used!|$data"
    exit 2
elif [ "$memUsedPrc" -ge "${WARNING}" ]; then
    echo "MEMORY WARNING - Total: $memTotal_m MB - Used: $memUsed_m MB - $memUsedPrc% used!|$data"
    exit 1
else
    echo "MEMORY OK - Total: $memTotal_m MB - Used: $memUsed_m MB - $memUsedPrc% used|$data"
    exit 0
fi
